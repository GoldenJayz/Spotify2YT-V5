import { google } from "googleapis";
import { ConnectionClosedEvent } from "mongodb";
const { authenticate } = require("@google-cloud/local-auth");
import { userSongs } from "./DatabaseCalls";
import { data, db, queue, userDoc } from "./Spotify";

// Global Constants
const client = new google.auth.OAuth2(
  data.google.client_id,
  data.google.client_secret,
  data.google.redirect_uri
);

const yt = google.youtube({
  version: "v3",
  auth: client,
});

const scopes = ["https://www.googleapis.com/auth/youtube"];

export const reqUrl = client.generateAuthUrl({
  access_type: "offline",
  scope: scopes,
  include_granted_scopes: true,
});

let curUser: string; // get cur user off queue when done
let playlistId: string;

console.log(reqUrl);

// ------------------------------------------------------------
//---------------------CALLBACK SECTION -----------------------
// ------------------------------------------------------------

export const googleCallback = (req: any, res: any) => {
  const code = req.query.code!;
  client.getToken(code).then(getTokenRes);
  return res.redirect("/");
};

const getTokenRes = (res: any) => {
  let tokens: googleToken = res.tokens! != null ? res.tokens : null;
  curUser = queue[0];

  db.listDocuments(curUser).then((res: any) =>
    console.log(`Database: ${res[0]}`)
  );

  db.updateData(curUser, { google_refresh_token: tokens.refresh_token }).then(
    (res: any) => console.log(res)
  );

  client.setCredentials(tokens);

  // then use youtube search api to search for the songs and get the links

  console.log(curUser);
  console.log(userSongs[curUser][0]); // Gets the first song name

  yt.playlists
    .insert({
      part: ["snippet"],
      requestBody: {
        snippet: {
          title: "test",
          description: "Playlist generated by Spotify2YT-V5",
        },
      },
    })
    .then(playlistCreationRes);
};

const playlistCreationRes = (res: any) => {
  playlistId = res.data.id; // Users playlist id that was just created

  yt.search.list({
    part: ["snippet"],
    maxResults: 1,
    order: "relevance",
    q: `${curUser}`,
  }).then(dumpIntoPlaylist);
};

const dumpIntoPlaylist = (res: any) => {
  let id = res.data.items[0].id.videoId;

  yt.playlistItems.insert({
    part: ["snippet"],
    
    requestBody: {
      snippet: {
        playlistId: playlistId,
      },
      resourceId: {
        id: id,
        kind: "youtube#playlistItem"
      }
    },
  });
};
